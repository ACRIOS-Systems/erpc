{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}

#if !defined({$commonGuardMacro})
#define {$commonGuardMacro}
{% if usedUnionType %}

#if defined(__CC_ARM) || defined(__ARMCC_VERSION)
#pragma anon_unions
#endif
{% endif -- usedUnionType %}

{% for inc in includes %}
#include "{$inc}"
{% endfor -- includes %}

#include <cstdbool>
#include <cstddef>
#include <cstdint>

#include "erpc_version.h"
{% if empty(crc16) == false %}
#include "{$crcHeaderName}"
{% endif  -- empty(crc16) == false %}

{$checkVersion()}
{$>checkCrc()}

#if !defined(ERPC_TYPE_DEFINITIONS{$scopeNamePrefix}{$scopeNameC})
#define ERPC_TYPE_DEFINITIONS{$scopeNamePrefix}{$scopeNameC}
{$fillNamespaceBegin()}
{% if not empty(enums) %}

// Enumerators data types declarations
{%  for enum in enums %}
{$> enum.mlComment}
enum{%   if enum.name %} class{% endif --enum.name  %}{$addIndent(" ", enum.name)}
{
{%   for enumMember in enum.members %}
{$> addIndent("    ", enumMember.mlComment)}
    {$enumMember.memberDeclaration}{$enumMember.ilComment}
{%   endfor -- enumsMembers %}
};{$enum.ilComment}{$loop.addNewLineIfNotLast}
{%  endfor -- enums %}
{% endif -- enums %}
{% if not empty(aliases) %}

// Aliases data types declarations
{%  for alias in aliases %}
{$> alias.mlComment}
{%   if alias.forwardDecl != "" %}
{$alias.forwardDeclCpp};{$alias.ilComment}
{%   elif alias.typenameName == "" %}
typedef {$alias.unnamedType}
{
{%    for mem in alias.unnamed.members %}
    {$mem.memberDeclaration}
{%    endfor -- alias.unnamed.members %}
} {$alias.unnamedName};
{%   else -- alias.typenameName %}
typedef {$alias.typenameName};{$alias.ilComment}
{%   endif -- alias.typenameName %}
{%  endfor -- aliases %}
{% endif -- aliases %}
{% if nonExternalStructUnion %}

// Structures/unions data types declarations
{%  for us in symbols %}
{%   if !us.isExternal %}
{%    if us.type == "struct" %}
{$> us.mlComment}
struct {$us.name}
{
{%     for mem in us.members %}
{$> addIndent("    ", mem.mlComment)}
    {$mem.memberDeclaration}{$mem.ilComment}
{$> addIndent("    ", mem.elementsCount)}
{%     endfor %}
};{$us.ilComment}{$loop.addNewLineIfNotLast}
{%    else -- us.type == "union" %}
{$> us.mlComment}
union {$us.name}
{
{$ addIndent("    ", unionMembersDeclaration(us))}
};{$us.ilComment}{$loop.addNewLineIfNotLast}
{%    endif -- us.type == "union/struct" %}
{%   endif -- !us.isExternal %}
{%  endfor -- symbols %}

{% endif -- nonExternalStruct || nonExternalUnion %}
{% if not empty(consts) %}

// Constant variable declarations
{%  for c in consts %}
{$> c.mlComment}
extern const {$c.typeAndName};{$c.ilComment}{$loop.addNewLineIfNotLast}
{%  endfor -- consts %}
{% endif -- consts %}
{$fillNamespaceEnd()}

#endif // ERPC_TYPE_DEFINITIONS{$scopeNamePrefix}{$scopeNameC}

#endif // {$commonGuardMacro}
